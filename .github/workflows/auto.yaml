name: Run Test

# develop branch가 push되거나 pull request 하면 테스트 실행
on:
  push:
    branches: [ develop ]
  pull_request:
    branches:
      - develop

jobs:
  docker_test:
    # 운영체제 설정, ubuntu latest보단 서버와 버전을 맞추는 게 좋을듯?
    runs-on: ubuntu-latest

    steps:
      # 해당 브랜치의 코드를 가져온다
      # git에서 브랜치를 바꿀 때 쓰는 check out과 다른 의미인가...?
      - name: Checkout code
        uses: actions/checkout@v4

      # 고급 빌드를 위한 buildx - 없어도 사용 가능
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # git secret을 환경변수 파일로 복사하기
      - name: Set up environment variables
        run: |
          echo "REQUEST_URL=${{ secrets.REQUEST_URL }}" >> $GITHUB_ENV
          echo "SERVER_PORT=${{ secrets.SERVER_PORT }}" >> $GITHUB_ENV
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
          echo "MAIL_FROM=${{ secrets.MAIL_FROM }}" >> $GITHUB_ENV
          echo "MAIL_ID=${{ secrets.MAIL_ID }}" >> $GITHUB_ENV
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> $GITHUB_ENV
          echo "MAIL_HOST=${{ secrets.MAIL_HOST }}" >> $GITHUB_ENV
          echo "DATASOURCE_USERNAME=${{ secrets.DATASOURCE_USERNAME }}" >> $GITHUB_ENV
          echo "DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }}" >> $GITHUB_ENV
          echo "DATASOURCE_URL=${{ secrets.DATASOURCE_URL }}" >> $GITHUB_ENV
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> $GITHUB_ENV
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> $GITHUB_ENV

      # unittest 실행
      - name: Run tests in Docker container
        working-directory: ${{ github.workspace }}
        run: docker-compose run --rm spring-app ./gradlew clean test

      # 하단은 log 출력  git Action으로 노출되는지 여부 테스트. 지워도 된다.

      # 애플리케이션 실행
      - name: Run application and output logs
        working-directory: ${{ github.workspace }}
        run: docker-compose up -d

      # 애플리케이션 로그를 출력
      - name: Display application logs
        run: docker-compose logs spring-app

      # 애플리케이션 실행
      - name: Run application and output logs
        working-directory: ${{ github.workspace }}
        run: docker-compose down
